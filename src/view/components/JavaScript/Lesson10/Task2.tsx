/* eslint-disable max-len */
import React, { FC } from 'react';

export const Task2: FC = () => {
    const calculate = (...rest: Function[]) => {
        return rest.reduce((prev, next) => {
            if (typeof next !== 'function') {
                throw new Error('Один из аргументов функции calculate() не является функцией');
            }
            if (typeof next() === 'undefined') {
                throw new Error('Одна функция из аргументов не вернула значение');
            }

            return next(prev);
        }, 0);
    };

    const result = calculate(
        () => {
            return 7;
        },
        (prevResult: number) => {
            return prevResult + 4;
        },
        (prevResult: number) => {
            return prevResult * 5;
        },
    );

    console.log(result); // 55

    return (
        <div>
            <h1>Задача 2.</h1>
            <div>
                * Напишите функцию calculate(), которая в качестве аргументов принимает неограниченное количество функций.
                *
                * При запуске calculate() последовательно запускает коллбек-функции из аргументов.
                * Каждая коллбек-функция из цепочки в качестве своего аргумента принимает то, что возвращает предыдущая коллбек-функция.
                * То есть возвращаемое значение каждой коллбек-функции из цепочки
                * становится доступным из параметра следующей коллбек-функции в цепочке.
                *
                * Первая коллбек-функция не принимает параметров.
                *
                * После выполнения всей цепочки, функция calculate() должна вернуть результат выполнения последней коллбек-функции.
                *
                * Генерировать ошибки если:
                * - Любой из аргументов функции calculate() не является функцией;
                * - Любая функция из аргументов не вернула значение.
                */
            </div>
        </div>
    );
};
